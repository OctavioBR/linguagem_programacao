Escolher uma ling: Javascript
(linguagem quente, em grande ascenção desde 2011; paradigma funcional)

Link do trabalho, última página:
http://www.inf.ufsc.br/~olinto/ine5622-cap3-132.pdf

#### Introdução ####
	Neste trabalho iremos abordar a linguagem de programação JavaScript, uma linguagem interpretada desenvolvida para Web. Sua implementação possibilita aos usuários interagir de maneira mais dinamica com as páginas da web, fazendo com que as aplicações fiquem mais interessantes. Algumas das suas funções classicas são alterações de elementos HTML ou CSS, comunicação assincrona com o servidor ou interação com o usuário. Ela foi concebida para ser executada no cliente (navegador) da aplicação, entretanto hoje em dia com uma tentativa de se usar apenas uma linguagem de programação para toda a aplicação foram desenvolvidos alguns frameworks como o node.js onde o desenvolvedor tem a possibilidade de programar em JavaScript do lado do servidor.

#### Descrição da LP (Aspectos Gerais) #####
	
1. Histórico
	JavaScript foi originalmente desenvolvido por Brendan Eich da Netscape sob o nome de Mocha, posteriormente teve seu nome mudado para LiveScript e por fim JavaScript. LiveScript foi o nome oficial da linguagem quando foi lançada pela primeira vez na versão beta do navegador Netscape 2.0 em setembro de 1995, mas teve seu nome mudado em um anúncio conjunto com a Sun Microsystems em dezembro de 1995 quando foi implementado no navegador Netscape versão 2.0B3.
	A mudança de nome de LiveScript para JavaScript coincidiu com a época em que a Netscape adicionou suporte à tecnologia Java em seu navegador (Applets). A escolha final do nome causou confusão dando a impressão de que a linguagem foi baseada em java, sendo que tal escolha foi caracterizada por muitos como uma estratégia de marketing da Netscape para aproveitar a popularidade do recém-lançado Java.
	JavaScript rapidamente adquiriu ampla aceitação como linguagem de script client-side de páginas web. Como consequência, a Microsoft desenvolveu um dialeto compatível com a linguagem de nome JScript para evitar problemas de marca registrada. JScript adicionou novos métodos para consertar métodos do Javascript relacionados a data que apresentavam problemas[carece de fontes]. JScript foi incluído no Internet Explorer 3.0, liberado em Agosto de 1996. Javascript e Jscript são tão similares que os dois termos são comumente usados de forma intercambiável. A Microsoft entretanto declara muitas características nas quais JScript não conforma com a especificação ECMA.
	Em novembro de 1996 a Netscape anunciou que tinha submetido JavaScript para Ecma internacional como candidato a padrão industrial e o trabalho subsequente resultou na versão padronizada chamada ECMAScript.
	JavaScript tem se transformado na linguagem de programação mais popular da web. Inicialmente, no entanto, muitos profissionais denegriram a linguagem pois ela tinha como alvo principal o público leigo. Com o advento do Ajax, JavaScript teve sua popularidade de volta e recebeu mais atenção profissional. O resultado foi a proliferação de frameworks e bibliotecas, práticas de programação melhoradas e o aumento no uso do JavaScript fora do ambiente de navegadores, bem como o uso de plataformas de JavaScript server-side.
	Em janeiro de 2009 o projeto CommonJS foi fundado com o objetivo de especificar uma biblioteca padrão para desenvolvimento JavaScript fora do navegador. (Wikipedia)

2. Classificação (seção 2)
 2.1. Geração
	JavaScript é uma linguagem de script interpretada de terceira geração, projetada para profissionais de informática. Ela possui caracteristicas procedurais, imperativa, orientada a objetos, funcional e baseada em protótipos. Os comandos tradicionais de C como if, while switch estão presentes na linguagem.

 2.2. Domínio
	É uma linguagem primeiramente com um objetivo especifico de atuar nos navegadores alterado as páginas HTMLs dando mais dinamica a elas. Porém como mencionado anteriormente, hoje em dia ela também pode ser utilizado do lado do servidor, promovendo um maior conforto ao desenvolvedor e velocidade no desenvolvimento fazendo com que ele utilize apenas uma linguagem para toda a aplicação.
 
 2.3. Implementação
	Por ser uma linguagem de script ela é considerada uma linguagem interpretada, não sendo compilada. Todas as linguagens de "script" são linguagens interpretadas. Ela é executada no interior do navegador enviando comandos ao mesmo para que altere o conteúdo de uma página, ela é processada pelo dispositivo do usuário e não pelo servidor, dessa forma quanto melhor for o dispositivo do usuário mais rápido será a execução de seus scripts.
	Como é uma linguagem de script o desenvolvedor tem uma agilidade muito grande para a implementação de funcionalidades, entretanto por não ser compilada, onde teria um compilador que faria verificações de erros e otimização, ela se torna uma linguagem com maior tempo de execução.

 2.4. Paradigma de Programação
	JavaScript é uma linguagem baseada orientação a objetos, mas ao invés de classes ela utiliza-se de protótipos. Dessa forma, muitos fazem confusão crendo que ela não é orientada a objetos por não possuir classes. Através de protótipos, Javascript simula caracteristicas como herança que são feitas com classes em outras linguagens.
Exemplo: 
------------------------------------
function Person(name, age) {
        this.name = name;
        this.age = age;
        this.sayHello = function() {
             alert("My name is " + this.name + ", and i'm " + this.age + " years old");
        };
}

var henrique = new Person("Henrique", 65);
var octavio = new Person("Octavio", 57);

alert("This script was created by " + henrique.name + " - " + octavio.name);

henrique.sayHello();
octavio.sayHello();
------------------------------------

	Além disso, a linguagem incorpora caracteristicas de programação funcional, tendo uma sintaxe mais simples e um nível de programação mais elevado. Algumas de suas propriedades são as seguintes:    
		1. Função de primeira classe: é possível passar função ou variavel como parâmetro para outra função e retornar função ou variáveis da mesma.
		2. Função lambda: não há uma definição de nome para o método, é simplemente aberto ou declarado através de "function() {" e ali tera um novo método que é criado toda vez que é execudao por aquela parte do código. Pode-se criar várias outras funções anonimas, como também é conhecida, dentro de uma principal para executar determinadas tarefas.
Exemplo:
---------------------------------
function sum5(a) {
        return a + 5;
};
function sum8(a) {
        return a + 8;
};
function sum(a, otherSumFunc) {
        return otherSumFunc(a);
};

var b = 1;
alert("b equals = " + b);

b = sum(b, sum5);
alert("sum to b the function sum5, b equals " + b);

b = sum(b, sum8);
alert("sum to b the function sum8, b equals " + b);

/* função anonima*/
var sum = function(a,b,c) {
        return (a+b+c);
}(1,2,3);
alert(sum);
---------------------------------	 

3. Conceitos fundamentais (seção 3)
	A tipagem de suas váriaveis é dinâmica e fraca, podendo alterar variaveis que anteriormente eram números inteiros para uma string. O controle delas tem que ser feito pelo desenvolvedor, utilizando-se métodos da linguagem é possível verificar qual o tipo, em determinado momento, da váriavel. A linguagem é "case sensitive", ou seja, diferencia maiúsculo de minúsculo.
	Ela permite a declaração de variaveis e constantes, as contantes são definidas pela palavra reservada "const" e as variáveis por "var". No exemplo a seguir é demonstrado o uso dos dois tipos, em JavaScript quando o código tenta alterar alguma constante, esta parte do código é simplesmente ignorada. Como mostrado a seguir, sua declaração também é implicita, ou seja, não é necessário informar de qual tipo será a variável ou constante, em outras linguagens isso é feito informando o tipo antes ou depois das variáveis. Outra caracteristica é que as variáveis tem vinculação dinâmica, ou seja, também podem trocar de tipo e não apenas de valor ao decorrer do programa, como mostrado a seguir.
Exemplo (variáveis, constantes, declaração implicita, vinculação dinâmica):
------------ 
var b = 1;
const c = 1;
b = 2;
b = "aloalo";
c = 2;
alert("b=" + b + " c=" + c);
//resultado: b=aloalo c=1
--------------
	Os tipos primitivos de JavaScript são undefined (representa variáveis sem valores definidos), null, boolean (true ou false), string, numbers. Numbers podem ser inteiros, reais, octal, hexa ou até mesmo na forma exponencial, mas todos eles são considerados como number, também há a palavra reservada "Infinity" que é a representação de infinito e NaN (not a number), sendo do tipo number.

	Em JavaScript existem as propriedades enumeradas de objetos que são criadas através da declaração "var".
---------------
var Day = {Friday:"Sexta-Feira", Saturday:"Sábado", Sunday:"Domingo"};
var today = Day.Friday;
alert(today);
---------------

#### Avaliação elaborada ######
Obs.: Bem fundamentada e ilustrada com exemplos
Critérios/Caracteristicas de avaliação. Ver seção 4.

Já vai rolas uns code scala aqui então.



### Conclusão ####

### Bibliografia ####
http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742
http://pt.wikipedia.org/wiki/JavaScript
http://en.wikipedia.org/wiki/JavaScriptx
JavaScript: The definitive guide 6th edition, O'Reilly - David Flanagan
http://www.ibm.com/developerworks/library/wa-javascript/index.html


